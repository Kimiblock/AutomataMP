type uint64_t 8 [[u64]]
type int64_t 8 [[i64]]
type int32_t 4 [[i32]]
type uint32_t 4 [[u32]]
type int16_t 2 [[i16]]
type uint16_t 2 [[u16]]
type uint8_t 1 [[u8]]
type float 4 [[f32]]
type char 1
type void 0
type wchar_t 2 [[u16]]
type bool 1 [[u8]]

namespace regenny{
struct RTL_CRITICAL_SECTION {
     void* DebugInfo;
     int32_t LockCount;
     int32_t RecursionCount;
     void* OwningThread;
     void* LockSemaphore;
     uint32_t SpinCount;
};

struct UnkEntityData 0x1000 {
};

struct Vector3f {
	float x; 
	float y; 
	float z;
};

struct Vector4f {
	float x; 
	float y; 
	float z;
	float w;
};

struct Matrix4x4f {
	Vector4f x;
	Vector4f y;
	Vector4f z;
	Vector4f w;
};

enum EModel : uint32_t {
    MODEL_2B = 0x10000,
    MODEL_A2 = 0x10100,
    MODEL_9S = 0x10200,
};

enum ERunSpeedType : uint32_t {
    SPEED_PLAYER = 0,
    SPEED_BUDDY = 1,
};

struct CharacterController 0x850 {
	RTL_CRITICAL_SECTION critical_section @ 0x88;
	uint32_t held_flags @ 0x738;
	uint32_t flags;
	uint32_t buttons[8] + 0x30;
	float speed @ 0x794
	float facing @ 0x79C
};

struct Xml 8 {
	virtual void destructor();
	virtual void lastVirtual() @ 80
};

struct XmlBinary : Xml 0x40 {
};

struct Entity{};
struct Parts 8 {
	virtual void destructor();
};

struct cModelExtendWorkBase 8 {
	void* vftable
};

struct cModelExtendWork : cModelExtendWorkBase 0x250 {
};

struct Model : Parts 0x590 {
	Vector4f position @ 0x50;

	float facing @ 0x94;
	float tick_count @ 0x9C;
	Matrix4x4f model_mat4_1 @ 0xC0
	Matrix4x4f model_mat4_2 @ 0x100
	cModelExtendWork model_extend @ 0x140;
	float _578 @ 0x578
	float _57C @ 0x57C
};

struct Obj : Model 0x670 {
	uint32_t obj_flags @ 0x598;
	EModel model_index @ 0x5b8;
	Entity* entity @ 0x610;
	//XmlBinary xml @ 0x618;
	// this is a XmlBinary.
	char xmlbinary_data[0x40] @ 0x618
};

struct BehaviorExtension 0x10 {
	void* vftable
};

struct Behavior : Obj 0x830 {
	virtual void start_animation(uint32_t anim, uint32_t variant, uint32_t a3, uint32_t a4) @ 18
	virtual void last_behavior_vfunc() @ 64

	void* behavior_extension_array @ 0x6B0; // lib::StaticArray<std::pair<enum  lib::TypeId,BehaviorExtension *>,16,8>
};

struct ExActionState : BehaviorExtension 0x28 {
};

struct ExNpc : BehaviorExtension 0x38 {
};

struct ExWaypoint : BehaviorExtension 0xB0 {
};

struct BehaviorAppBase : Behavior 0xC50 {
	virtual void request_anim(uint32_t anim) @ 112
	virtual void request_anim_table(uint32_t anim) @ 113

	virtual void request_anim_op(void* a1, void* a2) @ 115
	virtual void request_move(Vector4f* pos, int32_t unk) @ 116

	ExActionState ex_action_state @ 0x830

	uint32_t health @ 0x858;
	ExNpc ex_npc @ 0xA98
	ExWaypoint ex_waypoint @ 0x8E0;
	uint32_t wait_flags @ 0xBC0; // 1 == wait
	uint32_t talk_flags @ 0xBCC;
	float anim_spd_rate @ 0xC40;
};

struct WpAnimName{}
	

struct ExBaseInfo 0x1F8 {
	void* wp_anim_name_array @ 0x130; // placeholder, is not a pointer.
};

struct ExCollision : BehaviorExtension 0x130 {
};

struct ExExpInfo : BehaviorExtension 0xAF8 {
};

struct ExCatch : BehaviorExtension 0x80 {
};

struct ExLockOn : BehaviorExtension 0xf0 {
};

struct ExLayoutParent : BehaviorExtension 0x110 {
};

struct ExHackingInfo : BehaviorExtension 0x80 {
};

struct ExAtkCombo : BehaviorExtension {
};

struct cHitPrim 0x150 {
}

struct cObjHit : cHitPrim 0x290 {
};

struct Pl0000 : BehaviorAppBase 0x17920 {
	CharacterController controller @ 0xCa0
	cObjHit obj_hit @ 0x14F0
	ExCollision ex_collision_1 @ 0x1790;
	ExCollision ex_collision_2 @ 0x18C0;
	ExBaseInfo ex_base_info @ 0x1E80;
	ExExpInfo ex_exp_info @ 0x2078;
	ExCatch ex_catch @ 0x2b70;
	ExLockOn ex_lock_on @ 0x10030;

	void* obj_array_1 @ 0x10290;

	uint32_t weapon_index @ 0x107d8
	uint32_t pod_index @ 0x10820
	ExLayoutParent ex_layout_parent @ 0x126E0;
	ExHackingInfo ex_hacking_info @ 0x12850;

	//uint32_t controlled_entity_maybe2 @ 0x12AC4; // suspiciously close to hacking info.

	void* obj_array_2 @ 0x12BD8;
	void* obj_array_3 @ 0x12D00;
	void* flight_missile_array_1 @ 0x12DD0;
	void* flight_missile_array_2 @ 0x12E20;

	void* obj_array_4 @ 0x12ED0;

	ExAtkCombo ex_atk_combo @ 0x130f0;

	void* entity_handle_array_1 @ 0x15ED8

	uint32_t buddy_handle @ 0x1647c
	ERunSpeedType run_speed_type @ 0x16488

	void* obj_array_5 @ 0x16090; // placeholder until templates.
	void* entity_handle_array_2 @ 0x16590; // placeholder until templates.
	void* passive_skill_array @ 0x16608; // placeholder until templates.

	uint32_t controlled_entity_maybe @ 0x16E14

	bool shorts_torn @ 0x16ce4
	bool wearing_mask @ 0x16cEC
	bool flashlight @ 0x174b0
};

class Em0000 0x10000 {
};

struct Entity 0x1000 {
	UnkEntityData* unknown;
	char name[0x20] [[utf8*]]
	uint64_t flags;
	uint32_t handle;
	void* unknown2 + 4
	void* raw_file_data;
	Behavior* behavior;
};

struct CameraData 0x1000 {
	Matrix4x4f viewproj @ 0x80
	Matrix4x4f view;
};

struct CameraTransform 0x60 {
	virtual void destructor();
	Vector3f pos @ 0x10;
	Vector3f pos2;
	Vector3f pos3;
};

struct CameraBase : CameraTransform 0x70 {
	CameraData* data @ 0x60
};

struct Camera : CameraBase 0x70 {
};

struct CameraApp : Camera 0x370 {
	virtual void cameraAppLastVirtual() @ 2
	float fov @ 0x138
};

struct CameraGame : CameraApp 0x8c20 {
};
}