// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package nier

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Packet struct {
	_tab flatbuffers.Table
}

func GetRootAsPacket(buf []byte, offset flatbuffers.UOffsetT) *Packet {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Packet{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsPacket(buf []byte, offset flatbuffers.UOffsetT) *Packet {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Packet{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Packet) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Packet) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Packet) Magic() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 1347240270
}

func (rcv *Packet) MutateMagic(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *Packet) Id() PacketType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return PacketType(rcv._tab.GetUint32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Packet) MutateId(n PacketType) bool {
	return rcv._tab.MutateUint32Slot(6, uint32(n))
}

func (rcv *Packet) Data(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Packet) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Packet) DataBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Packet) MutateData(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func PacketStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func PacketAddMagic(builder *flatbuffers.Builder, magic uint32) {
	builder.PrependUint32Slot(0, magic, 1347240270)
}
func PacketAddId(builder *flatbuffers.Builder, id PacketType) {
	builder.PrependUint32Slot(1, uint32(id), 0)
}
func PacketAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(data), 0)
}
func PacketStartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func PacketEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
