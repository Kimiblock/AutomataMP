// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package nier

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Hello struct {
	_tab flatbuffers.Table
}

func GetRootAsHello(buf []byte, offset flatbuffers.UOffsetT) *Hello {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Hello{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsHello(buf []byte, offset flatbuffers.UOffsetT) *Hello {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Hello{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Hello) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Hello) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Hello) Major() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Hello) MutateMajor(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *Hello) Minor() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Hello) MutateMinor(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *Hello) Patch() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Hello) MutatePatch(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *Hello) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Hello) Password() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Hello) Model() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Hello) MutateModel(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func HelloStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func HelloAddMajor(builder *flatbuffers.Builder, major uint32) {
	builder.PrependUint32Slot(0, major, 0)
}
func HelloAddMinor(builder *flatbuffers.Builder, minor uint32) {
	builder.PrependUint32Slot(1, minor, 0)
}
func HelloAddPatch(builder *flatbuffers.Builder, patch uint32) {
	builder.PrependUint32Slot(2, patch, 0)
}
func HelloAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(name), 0)
}
func HelloAddPassword(builder *flatbuffers.Builder, password flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(password), 0)
}
func HelloAddModel(builder *flatbuffers.Builder, model uint32) {
	builder.PrependUint32Slot(5, model, 0)
}
func HelloEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
