// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package nier

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EntityData struct {
	_tab flatbuffers.Struct
}

func (rcv *EntityData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EntityData) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *EntityData) Facing() float32 {
	return rcv._tab.GetFloat32(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *EntityData) MutateFacing(n float32) bool {
	return rcv._tab.MutateFloat32(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *EntityData) Facing2() float32 {
	return rcv._tab.GetFloat32(rcv._tab.Pos + flatbuffers.UOffsetT(4))
}
func (rcv *EntityData) MutateFacing2(n float32) bool {
	return rcv._tab.MutateFloat32(rcv._tab.Pos+flatbuffers.UOffsetT(4), n)
}

func (rcv *EntityData) Health() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *EntityData) MutateHealth(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func (rcv *EntityData) Position(obj *Vector3f) *Vector3f {
	if obj == nil {
		obj = new(Vector3f)
	}
	obj.Init(rcv._tab.Bytes, rcv._tab.Pos+12)
	return obj
}

func CreateEntityData(builder *flatbuffers.Builder, facing float32, facing2 float32, health uint32, position_x float32, position_y float32, position_z float32) flatbuffers.UOffsetT {
	builder.Prep(4, 24)
	builder.Prep(4, 12)
	builder.PrependFloat32(position_z)
	builder.PrependFloat32(position_y)
	builder.PrependFloat32(position_x)
	builder.PrependUint32(health)
	builder.PrependFloat32(facing2)
	builder.PrependFloat32(facing)
	return builder.Offset()
}
