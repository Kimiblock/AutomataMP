// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Nier

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AnimationStart struct {
	_tab flatbuffers.Struct
}

func (rcv *AnimationStart) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AnimationStart) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *AnimationStart) Anim() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *AnimationStart) MutateAnim(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *AnimationStart) Variant() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(4))
}
func (rcv *AnimationStart) MutateVariant(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(4), n)
}

func (rcv *AnimationStart) A3() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *AnimationStart) MutateA3(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func (rcv *AnimationStart) A4() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(12))
}
func (rcv *AnimationStart) MutateA4(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(12), n)
}

func CreateAnimationStart(builder *flatbuffers.Builder, anim uint32, variant uint32, a3 uint32, a4 uint32) flatbuffers.UOffsetT {
	builder.Prep(4, 16)
	builder.PrependUint32(a4)
	builder.PrependUint32(a3)
	builder.PrependUint32(variant)
	builder.PrependUint32(anim)
	return builder.Offset()
}
