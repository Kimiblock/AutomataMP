// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Nier

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EntitySpawn struct {
	_tab flatbuffers.Table
}

func GetRootAsEntitySpawn(buf []byte, offset flatbuffers.UOffsetT) *EntitySpawn {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EntitySpawn{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEntitySpawn(buf []byte, offset flatbuffers.UOffsetT) *EntitySpawn {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EntitySpawn{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EntitySpawn) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EntitySpawn) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EntitySpawn) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EntitySpawn) Model() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EntitySpawn) MutateModel(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *EntitySpawn) Model2() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EntitySpawn) MutateModel2(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *EntitySpawn) Params(obj *EntitySpawnParams) *EntitySpawnParams {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(EntitySpawnParams)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func EntitySpawnStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func EntitySpawnAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func EntitySpawnAddModel(builder *flatbuffers.Builder, model uint32) {
	builder.PrependUint32Slot(1, model, 0)
}
func EntitySpawnAddModel2(builder *flatbuffers.Builder, model2 uint32) {
	builder.PrependUint32Slot(2, model2, 0)
}
func EntitySpawnAddParams(builder *flatbuffers.Builder, params flatbuffers.UOffsetT) {
	builder.PrependStructSlot(3, flatbuffers.UOffsetT(params), 0)
}
func EntitySpawnEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
